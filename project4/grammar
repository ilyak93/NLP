### Sample grammar for ATIS queries
### 236299
### (Project segment 4 distribution version)

## This grammar is intended to cover ATIS flight ID queries only. It
## assumes that such queries are a single noun phrase, perhaps
## preceded and followed by other text that can be ignored. (The
## nonterminals PREIGNORE and POSTIGNORE capture this text.)
##
## Conventions used in this grammar:
##
## The start nonterminal is S. Other nonterminal names are typically
## syntactic phrase types (e.g., NP, PP, Det, P) followed by a
## semantic category (e.g., FLIGHT, AIRLINE), separated by an underscore.
## The phrase type TERM is used for lexical lists for a particular semantic
## category.
## 
## Augmentations for these grammar rules follow a standard convention for the 
## types of the values associated with different nonterminals. We document these
## conventions here:
##
## Values: SQL query (as a string), e.g.,
##   "SELECT flight.flight_id FROM flight WHERE true"
##
##     S
##
## Values: SQL condition (that is, appropriate for a WHERE clause body) 
## for a relation `flight`, e.g.,
##   "flight.airline_code = 'UA'"
##
##     NOM_FLIGHT  
##     N_FLIGHT
##     PP
##     PP_*
##     ADJ
##     ADJ_*
##     TERM_FLIGHT
##     etc.

S -> NP_FLIGHT                                  : s_rule
        | PREIGNORE NP_FLIGHT
        | NP_FLIGHT POSTIGNORE
        | PREIGNORE NP_FLIGHT POSTIGNORE

NP_FLIGHT -> DET NOM_FLIGHT                     : first
        | NOM_FLIGHT                            : first

NOM_FLIGHT -> N_FLIGHT                          : first
        | ADJ NOM_FLIGHT                        : and_condition

N_FLIGHT -> TERM_FLIGHT                         : first
        | N_FLIGHT PP                           : and_condition

TERM_FLIGHT -> 'flights'                        : null_condition
        | 'flight'                              : null_condition
        | 'to' 'fly'                            : null_condition

## Pre-noun (primarily adjectival) flight modifiers
ADJ -> ADJ_AIRLINE                              : first
        | ADJ_DATE                              : first
        | ADJ_FLIGHTTYPE                        : first
        | ADJ_TIME                              : first
        | ADJ_PLACE                             : first
        | ADJ_PRICE                             : first
        | ADJ_CLASS                             : first
        | ADJ_FOOD                              : first

## Post-noun (prepositional phrase and relative clause) flight modifiers
PP -> PP_AIRLINE                        : first
        | PP_DATE                       : first
        | PP_TIME                       : first
        | PP_PLACE                      : first
        | PP_PRICE                      : first
        | PP_CLASS                      : first
        | PP_FOOD                       : first

DET -> 'all' 'the'                      : ignore
        | 'all'                         : ignore
        | 'a'
        | 'an'
        | 'the'
        | 'any'
        | 'all' 'of' 'the'
        | 'this'
        | 'this' 'coming'
        | 'next'
        | TERM_WEEKDAY "'s"

#### FLIGHT PROPERTIES ####

## Airline information

ADJ_AIRLINE -> TERM_AIRLINE                     : airline_adj_brand

PP_AIRLINE -> P_AIRLINE TERM_AIRLINE            : forward

P_AIRLINE -> 'on'                               : airline_pp_brand
        | 'using'                               : airline_pp_brand
        | 'of'                                  : airline_pp_brand
        | 'with'                                : airline_pp_brand

TERM_AIRLINE -> TERM_AIRBRAND                           : first
        | TERM_AIRBRAND TERM_AIRBRANDTYPE

TERM_AIRBRAND -> 'continental'        : constant('CO')
        | 'american'                  : constant('AA')
        | 'united'                    : constant('UA')
        | 'northwest'                 : constant('NW')
        | 'us'                        : constant('US')
        | 'delta'                     : constant('DL')
        | 'air' 'canada'              : constant('AC')
        | 'midwest' 'express'         : constant('YX') 
        | 'twa' | 'trans' 'world'     : constant('TW')

TERM_AIRBRANDTYPE -> 'airline'        : ignore
        | 'airlines'                  : ignore
        | 'air'                       : ignore

## Flight type information

ADJ_FLIGHTTYPE -> ADJ_FLIGHTTYPESIMPLE
        | ADJ_FLIGHTTYPESIMPLE 'and' ADJ_FLIGHTTYPE
        | ADJ_FLIGHTTYPESIMPLE 'or' ADJ_FLIGHTTYPE

ADJ_FLIGHTTYPESIMPLE -> 'round' 'trip'
        | 'round-trip'
        | 'return'
        | 'one' 'way'
        | 'nonstop'
        | 'direct'
        | 'connecting'

## Other properties (cost, class, food)

ADJ_PRICE -> 'cheapest'
        | 'lowest' 'cost'
        | 'least' 'expensive'
        | 'inexpensive'
        | 'cheap'

        | 'expensive'
        | 'highest' 'cost'
        | 'most' 'expensive'

PP_PRICE -> 'less' 'than' AMOUNT 'dollars'

        | 'with' 'the' 'lowest' 'fare'
        | 'the' 'cheapest' 'way' 'possible'

        | 'with' 'the' 'highest' 'fare'

ADJ_CLASS -> 'economy'
        | 'thrift' 'economy'
        | 'first' 'class'
        | 'transcontinental'
        | 'available'
        | 'possible'

PP_CLASS -> ADJ_CLASS

ADJ_FOOD -> NP_FOOD

PP_FOOD -> P_FOOD NP_FOOD

NP_FOOD -> 'dinner'
        | 'lunch'
        | 'breakfast'
        | 'a' 'meal'

P_FOOD -> 'serving'
        | 'with'

#### DATES ####

ADJ_DATE -> TERM_WEEKDAY

PP_DATE -> P_DATE NP_DATE              : forward
        | NP_DATE                      : first

P_DATE -> 'on'                         : leaves_on
        | 'returning' 'on'
        | 'of'
        | 'for'
        | 'next'
        | 'the' 'next'
        | 'in' 'the' 'next'
        | 'of' 'next'
        | 'leaving'
        | 'departing'
        | 'departing' 'on'
        | 'which' 'leave'
        | 'leaving' 'on'

        | 'arriving'
        | 'arriving' 'on'
        | 'that' 'arrive' 'on'
        | 'which' 'arrive' 'on'
        | 'a' 'week' 'from'

NP_DATE -> TERM_WEEKDAY                     : first
        | 'a' TERM_WEEKDAY
        | 'this' TERM_WEEKDAY
        | 'this' 'coming' TERM_WEEKDAY
        | NP_MDYDATE
        | 'saturdays'
        | 'sundays'
        | 'mondays'
        | 'tuesdays'
        | 'wednesdays'
        | 'thursdays'
        | 'fridays'
        | 'day'
        | 'week'
        | 'today'
        | 'tomorrow'
        | 'the' 'day' 'after' 'tomorrow'
        | 'weekdays'

NP_MDYDATE -> TERM_MONTH TERM_DAY YEAR
        | TERM_MONTH TERM_DAY
        | 'the' TERM_DAY 'of' TERM_MONTH
        | TERM_DAY 'of' TERM_MONTH
        | 'the' TERM_DAY
        | TERM_MONTH TERM_DAY 'or' TERM_DAY
        | 'either' TERM_MONTH TERM_DAY 'or' TERM_DAY
        | 'either' 'the' TERM_DAY 'or' 'the' TERM_DAY 'of' TERM_MONTH
        | 'the' TERM_DAY 'or' TERM_DAY
        | 'either' 'the' TERM_DAY 'or' 'the' TERM_DAY
        | 'the' TERM_DAY 'of' TERM_MONTH 'or' 'the' TERM_DAY 'of' TERM_MONTH
        | 'either' 'the' TERM_DAY 'of' TERM_MONTH 'or' 'the' TERM_DAY 'of' TERM_MONTH
        
TERM_WEEKDAY -> 'saturday'            :  constant(weekday(_RHS[0]))
        | 'sunday'
        | 'monday'
        | 'tuesday'
        | 'wednesday'
        | 'thursday'
        | 'friday'
        | 'weekday'
        
TERM_MONTH -> 'january'               : constant(month_name(_RHS[0]))
        | 'february' 
        | 'march' 
        | 'april' 
        | 'may' 
        | 'june' 
        | 'july' 
        | 'august' 
        | 'september' 
        | 'october' 
        | 'november' 
        | 'december'
        
TERM_DAY -> 'first'                   : constant(1)
        | 'second'                    : constant(2)
        | 'third'                     : constant(3)
        | 'fourth'                    : constant(4)
        | 'fifth'                     : constant(5)
        | 'sixth'                     : constant(6)
        | 'seventh'                   : constant(7)
        | 'eighth'                    : constant(8)
        | 'ninth'                     : constant(9)
        | 'tenth'                     : constant(10)
        | 'eleventh'                  : constant(11)
        | 'twelfth'                   : constant(12)
        | 'thirteenth'                : constant(13)
        | 'fourteenth'                : constant(14)
        | 'fifteenth'                 : constant(15)
        | 'sixteenth'                 : constant(16)
        | 'seventeenth'               : constant(17)
        | 'eighteenth'                : constant(18)
        | 'nineteenth'                : constant(19)
        | 'twentieth'                 : constant(20)
        | 'twenty-first'              : constant(21)
        | 'twenty' 'first'            : constant(21)
        | 'twenty-second'             : constant(22)
        | 'twenty' 'second'           : constant(22)
        | 'twenty-third'              : constant(23)
        | 'twenty' 'third'            : constant(23)
        | 'twenty-fourth'             : constant(24)
        | 'twenty' 'fourth'           : constant(24)
        | 'twenty-fifth'              : constant(25)
        | 'twenty' 'fifth'            : constant(25)
        | 'twenty-sixth'              : constant(26)
        | 'twenty' 'sixth'            : constant(26)
        | 'twenty-seventh'            : constant(27)
        | 'twenty' 'seventh'          : constant(27)
        | 'twenty-eighth'             : constant(28)
        | 'twenty' 'eighth'           : constant(28)
        | 'twenty-ninth'              : constant(29)
        | 'twenty' 'ninth'            : constant(29)
        | 'thirtieth'                 : constant(30)
        | 'thirty-first'              : constant(31)
        | 'thirty' 'first'            : constant(31)
        | 'one'                       : constant(1)
        | 'two'                       : constant(2)
        | 'three'                     : constant(3)
        | 'four'                      : constant(4)
        | 'five'                      : constant(5)
        | 'six'                       : constant(6)
        | 'seven'                     : constant(7)
        | 'eight'                     : constant(8)
        | 'nine'                      : constant(9)
        | 'ten'                       : constant(10)
        | 'eleven'                    : constant(11)
        | 'twelve'                    : constant(12)
        | 'thirteen'                  : constant(13)
        | 'fourteen'                  : constant(14)
        | 'fifteen'                   : constant(15)
        | 'sixteen'                   : constant(16)
        | 'seventeen'                 : constant(17)
        | 'eighteen'                  : constant(18)
        | 'nineteen'                  : constant(19)
        | 'twenty'                    : constant(20)
        | 'twenty' 'one'              : constant(21)
        | 'twenty' 'two'              : constant(22)
        | 'twenty' 'three'            : constant(23)
        | 'twenty' 'four'             : constant(24)
        | 'twenty' 'five'             : constant(25)
        | 'twenty' 'six'              : constant(26)
        | 'twenty' 'seven'            : constant(27)
        | 'twenty' 'eight'            : constant(28)
        | 'twenty' 'nine'             : constant(29)
        | 'thirty'                    : constant(30)
        | 'thirty' 'one'              : constant(31)

TERM_YEAR -> '1991'                   : constant(int(_RHS[0]))
        | '1992'

#### TIMES ####

PP_TIME -> P_TIME NP_TIME : forward

P_TIME -> 'that' 'arrive' 'before'                  : arives_before
        | 'that' 'arrives' 'before'                 : arives_before
        | 'arriving' 'before'                       : arives_before
        | 'arrival' 'by'                            : arives_before
        | 'which' 'arrive' 'before'                 : arives_before

        | 'departing' 'before'                      : departs_before
        | 'before'                                  : departs_before
        | 'that' 'leaves' 'before'                  : departs_before
        | 'by'                                      : departs_before
    
        | 'that' 'return' 'around'
        | 'that' 'gets' 'in' 'around'
        | 'arriving' 'around'
        | 'arriving' 'about'
        | 'that' 'arrive' 'soon' 'after'

        | 'around'
        
        | 'arrives'                                : arives_at
        | 'arriving' 'at'                          : arives_at
        | 'arriving'                               : arives_at

        | 'leaving' 'at'                           : departs_at
        | 'at'                                     : departs_at
        | 'leaving'                                : departs_at
        | 'in'                                     : departs_at
        | 'departing' 'at'                         : departs_at
        | 'on'                                     : departs_at
        | 'that' 'leaves' 'at'                     : departs_at
        
        | 'arriving' 'after'                       : arives_after
        | 'which' 'arrives' 'after'                : arives_after
        | 'that' 'arrives' 'after'                 : arives_after

        | 'which' 'leave' 'after'                  : departs_after
        | 'leaving' 'after'                        : departs_after
        | 'after'                                  : departs_after
        | 'departing' 'after'                      : departs_after
        | 'departing' 'in'                         : departs_after
        | 'that' 'depart' 'after'                  : departs_after
        | 'that' 'leaves' 'in'                     : departs_after

NP_TIME -> TERM_TIME                  : first
        | 'afternoons'                : constant(1200)
        | 'the' 'afternoon'
        | 'the' 'late' 'afternoon'    : constant(1600)
        | 'evenings'                  : constant(1800)
        | 'the' 'evening'
        | 'mornings'                  : constant(800)
        | 'the' 'morning'
        | 'the' 'early' 'am' 
        | 'as' 'early' 'as' 'possible' 
        | 'earliest' 'possible' 'time' 
        | 'the' 'day'                 : constant(1200)
        | 'as' 'soon' 'thereafter' 'as' 'possible' 
        | UNK


ADJ_TIME -> 'lunch' 'time'            : constant(depart_around(1200))
        | 'evening'                   : constant(depart_around(1800))
        | 'dinnertime'
        | 'late' 
        | 'night'                     : constant(depart_around(2000))
        | 'latest' 'possible' 
        | 'latest'
        | 'tonight' 
        | 'morning'                   : constant(depart_around(800))
        | 'early' 
        | 'earliest' 'possible' 
        | 'earliest' 
        | 'afternoon'                 : constant(depart_around(1600))
        | SIMPLETIME                  : first

TERM_TIME -> 'one' | '1'              : constant(100)
        | 'two' | '2'                 : constant(200)
        | 'three' | '3'               : constant(300)
        | 'four' | '4'                : constant(400)
        | 'five' | '5'                : constant(500)
        | 'six' | '6'                 : constant(600)
        | 'seven' | '7'               : constant(700)
        | 'eight' | '8'               : constant(800)
        | 'nine' | '9'                : constant(900)
        | 'ten' | '10'                : constant(1000)
        | 'eleven' | '11'             : constant(1100)
        | 'twelve' | '12' | 'noon'    : constant(1200)
        | 'midnight'                  : constant(0)
        | TERM_TIME TERM_TIMEMOD      : lambda Time, Mod: Time + Mod

TERM_TIMEMOD -> 'am'                  : constant(0)
        | 'oclock'
        | 'o' "'clock"
        | 'o' 'clock'
        | 'noon' 
        | 'pm'                        : constant(1200)
        | 'midnight' 

#### PLACES ####

ADJ_PLACE -> N_PLACE

N_PLACE -> TERM_PLACE                           : first
        | TERM_AIRPORT                          : first

PP_PLACE -> P_PLACE N_PLACE                     : forward
        | 'between' N_PLACE 'and' N_PLACE       : between


P_PLACE -> 'to'                                 : destination_airports
        | 'that' 'arrive' 'at'                  : destination_airports
        | 'that' 'arrives' 'in'                 : destination_airports
        | 'coming' 'back' 'to'                  : destination_airports
        | 'that' 'go' 'to'                      : destination_airports
        | 'and' 'then' 'to'                     : destination_airports
        | 'arriving' 'in'                       : destination_airports
        | 'and' 'arriving' 'in'                 : destination_airports
        | 'and' 'arrive' 'in'                   : destination_airports
        | 'to' 'arrive' 'in'                    : destination_airports
        | 'arrive' 'in'                         : destination_airports
        | 'going' 'to'                          : destination_airports
        | 'into'                                : destination_airports
        | 'for'                                 : destination_airports
        | 'with' 'the' 'destination' 'city' 'of': destination_airports
        | 'arriving'                            : destination_airports
        | 'goes' 'to'                           : destination_airports
        | 'flying' 'into'                       : destination_airports
        | 'goes' 'on' 'to'                      : destination_airports
        | 'reaching'                            : destination_airports
        | 'in'                                  : destination_airports
        | 'and' 'then'                          : destination_airports
        | 'arriving' 'to'                       : destination_airports

        | 'from'                                : origin_airports
        | 'leaving'                             : origin_airports
        | 'return' 'from'                       : origin_airports
        | 'leaving' 'from'                      : origin_airports
        | 'departing' 'from'                    : origin_airports
        | 'departing'                           : origin_airports
        | 'go' 'from'                           : origin_airports
        | 'going' 'from'                        : origin_airports
        | 'back' 'from'                         : origin_airports
        | 'that' 'goes' 'from'                  : origin_airports
        | 'that' 'departs'                      : origin_airports
        | 'which' 'leaves' 'from'               : origin_airports
        | 'which' 'leave'                       : origin_airports
        | 'that' 'leave'                        : origin_airports
        | 'originating' 'in'                    : origin_airports
        | 'leave'                               : origin_airports
        | 'out' 'of'                            : origin_airports
        | 'leaves' 'from'                       : origin_airports
        | 'to' 'get' 'from'                     : origin_airports

        | 'via'
        | 'with' 'a' 'stopover' 'in'
        | 'with' 'a' 'layover' 'in'
        | 'with' 'a' 'stopover' 'at'
        | 'and' 'a' 'stopover' 'in'
        | 'stop' 'in'
        | 'stopping' 'in'
        | 'make' 'a' 'stop' 'in'
        | 'with' 'a' 'stop' 'in'
        | 'with' 'one' 'stop' 'in'
        | 'go' 'through'
        | 'which' 'go' 'through'
        | 'makes' 'a' 'stopover' 'in'
        | 'that' 'stops' 'in'
        | 'that' 'stops' 'over' 'in'
        | 'by' 'way' 'of'
        | 'connecting' 'through'
        | 'that' 'will' 'stop' 'in'
        | 'which' 'connects' 'in'
        | 'arriving' 'and' 'departing' 'at'

## Place terms includes city and airport names. The provided semantic augmentations
## return a SQL query that generates a list of airport codes for the place. For 
## airport names, like "logan", it generates a query like
## 
##    SELECT airport.airport_code 
##    FROM airport 
##    WHERE airport.airport_name = "LOGAN INTERNATIONAL"
##
## For city names, like "boston", it generates a query like
##
##    SELECT airport_service.airport_code 
##    FROM airport_service 
##    WHERE airport_service.city_code IN
##        (SELECT city.city_code 
##         FROM city 
##         WHERE city.city_name = "BOSTON")
##
## Note the use of the appropriate field values found in the ATIS database, which are 
## quoted uppercase strings like "LOGAN INTERNATIONAL" or "BOSTON"

TERM_AIRPORT -> TERM_AIRPORT 'airport'           : first
     | TERM_AIRPORT 'airports'                   :first

     | 'baltimore/washington' 'international'    : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'burbank'                                 : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'buttonville'                             : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'charlotte/douglas' 'international'       : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'cincinnati/northern' 'kentucky' 'intl.'  : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'dallas/fort' 'worth' 'international'     : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'detroit' 'city'                          : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'dorval' 'international'                  : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'dulles' 'international'                  : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'general' 'mitchell' 'international'      : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'greater' 'pittsburgh' 'international'    : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'hobby'                                   : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'hopkins' 'international'                 : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'houston' 'intercontinental'              : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'indianapolis' 'international'            : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'john' 'f.' 'kennedy' 'international'     : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'kansas' 'city' 'international'           : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'la' 'guardia'                            : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'lambert' 'st.' 'louis' 'international'   : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'lester' 'b.' 'pearson' 'international'   : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'lindbergh' 'field/san' 'diego' 'international' : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'logan' 'international'                   : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'long' 'beach' 'municipal'                : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'los' 'angeles' 'international'           : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'love' 'field'                            : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'mccarran' 'international'                : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'memphis' 'international'                 : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'metropolitan' 'oakland' 'international'  : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'metropolitan' 'wayne' 'county'           : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'miami' 'international'                   : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'midway'                                  : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'minneapolis/st.' 'paul' 'international'  : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'mirabel'                                 : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'nashville' 'international'               : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'newark' 'international'                  : constant(airports_from_airport_name(' '.join(_RHS)))
     | "o'hare" 'international'                  : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'ontario' 'international'                 : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'orlando' 'international'                 : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'philadelphia' 'international'            : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'port' 'columbus' 'international'         : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'salt' 'lake' 'city' 'international'      : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'san' 'francisco' 'international'         : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'san' 'jose' 'international'              : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'seattle/tacoma' 'international'          : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'sky' 'harbor' 'international'            : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'st.' 'petersburg/clearwater' 'international' : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'stapleton' 'international'               : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'tampa' 'international'                   : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'toronto' 'island'                        : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'washington' 'national'                   : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'westchester' 'county'                    : constant(airports_from_airport_name(' '.join(_RHS)))
     | 'william' 'b.' 'hartsfield' 'atlanta' 'intl.' : constant(airports_from_airport_name(' '.join(_RHS)))

     ## airport name synonyms
     | 'bwi'                           : constant(airports_from_airport_name('baltimore/washington international'))
     | 'douglas'                       : constant(airports_from_airport_name('charlotte/douglas international'))
     | 'dfw'                           : constant(airports_from_airport_name('dallas/fort worth international'))
     | 'dorval'                        : constant(airports_from_airport_name('dorval international'))
     | 'dulles'                        : constant(airports_from_airport_name('dulles international'))
     | 'general mitchell'              : constant(airports_from_airport_name('general mitchell international'))
     | 'hopkins'                       : constant(airports_from_airport_name('hopkins international'))
     | 'jfk'                           : constant(airports_from_airport_name('john f. kennedy international'))
         | 'john' 'f.' 'kennedy'       : constant(airports_from_airport_name('john f. kennedy international'))
         | 'kennedy'                   : constant(airports_from_airport_name('john f. kennedy international'))
     | 'laguardia'                     : constant(airports_from_airport_name('la guardia'))
     | 'lambert'                       : constant(airports_from_airport_name('lambert st. louis international'))
     | 'pearson'                       : constant(airports_from_airport_name('lester b. pearson international'))
     | 'lindbergh'                     : constant(airports_from_airport_name('lindbergh field/san diego international'))
     | 'logan'                         : constant(airports_from_airport_name('logan international'))
     | 'mccarran'                      : constant(airports_from_airport_name('mccarran international'))


TERM_PLACE -> 'atlanta'                : constant(airports_from_city(' '.join(_RHS)))
        | 'austin'                     : constant(airports_from_city(' '.join(_RHS)))
        | 'baltimore'                  : constant(airports_from_city(' '.join(_RHS)))
        | 'boston'                     : constant(airports_from_city(' '.join(_RHS)))
        | 'burbank'                    : constant(airports_from_city(' '.join(_RHS)))
        | 'charlotte'                  : constant(airports_from_city(' '.join(_RHS)))
        | 'chicago'                    : constant(airports_from_city(' '.join(_RHS)))
        | 'cincinnati'                 : constant(airports_from_city(' '.join(_RHS)))
        | 'cleveland'                  : constant(airports_from_city(' '.join(_RHS)))
        | 'columbus'                   : constant(airports_from_city(' '.join(_RHS)))
        | 'dallas'                     : constant(airports_from_city(' '.join(_RHS)))
        | 'denver'                     : constant(airports_from_city(' '.join(_RHS)))
        | 'detroit'                    : constant(airports_from_city(' '.join(_RHS)))
        | 'houston'                    : constant(airports_from_city(' '.join(_RHS)))
        | 'indianapolis'               : constant(airports_from_city(' '.join(_RHS)))
        | 'kansas' 'city'              : constant(airports_from_city(' '.join(_RHS)))
        | 'las' 'vegas'                : constant(airports_from_city(' '.join(_RHS)))
        | 'long' 'beach'               : constant(airports_from_city(' '.join(_RHS)))
        | 'los' 'angeles'              : constant(airports_from_city(' '.join(_RHS)))
        | 'memphis'                    : constant(airports_from_city(' '.join(_RHS)))
        | 'miami'                      : constant(airports_from_city(' '.join(_RHS)))
        | 'milwaukee'                  : constant(airports_from_city(' '.join(_RHS)))
        | 'minneapolis'                : constant(airports_from_city(' '.join(_RHS)))
        | 'montreal'                   : constant(airports_from_city(' '.join(_RHS)))
        | 'nashville'                  : constant(airports_from_city(' '.join(_RHS)))
        | 'new' 'york'                 : constant(airports_from_city(' '.join(_RHS)))
        | 'newark'                     : constant(airports_from_city(' '.join(_RHS)))
        | 'oakland'                    : constant(airports_from_city(' '.join(_RHS)))
        | 'ontario'                    : constant(airports_from_city(' '.join(_RHS)))
        | 'orlando'                    : constant(airports_from_city(' '.join(_RHS)))
        | 'philadelphia'               : constant(airports_from_city(' '.join(_RHS)))
        | 'phoenix'                    : constant(airports_from_city(' '.join(_RHS)))
        | 'pittsburgh'                 : constant(airports_from_city(' '.join(_RHS)))
        | 'salt' 'lake' 'city'         : constant(airports_from_city(' '.join(_RHS)))
        | 'san' 'diego'                : constant(airports_from_city(' '.join(_RHS)))
        | 'san' 'francisco'            : constant(airports_from_city(' '.join(_RHS)))
        | 'san' 'jose'                 : constant(airports_from_city(' '.join(_RHS)))
        | 'seattle'                    : constant(airports_from_city(' '.join(_RHS)))
        | 'st.' 'louis'                : constant(airports_from_city(' '.join(_RHS)))
        | 'st.' 'paul'                 : constant(airports_from_city(' '.join(_RHS)))
        | 'st.' 'petersburg'           : constant(airports_from_city(' '.join(_RHS)))
        | 'tacoma'                     : constant(airports_from_city(' '.join(_RHS)))
        | 'tampa'                      : constant(airports_from_city(' '.join(_RHS)))
        | 'toronto'                    : constant(airports_from_city(' '.join(_RHS)))
        | 'washington'                 : constant(airports_from_city(' '.join(_RHS)))
        | 'dc'                         : constant(airports_from_city(' '.join(_RHS)))
        | 'westchester' 'county'       : constant(airports_from_city(' '.join(_RHS)))

        ## city name synonyms
        | 'cleveland' 'ohio'          : constant(airports_from_city('cleveland'))
        | 'dallas' 'fort' 'worth'     : constant(airports_from_city('dallas'))
        | 'fort' 'worth'              : constant(airports_from_city('dallas'))
        | 'denver' 'colorado'         : constant(airports_from_city('denver'))
        | 'montreal' 'quebec'         : constant(airports_from_city('montreal'))
        | 'montreal' 'canada'         : constant(airports_from_city('montreal'))
        | 'new' 'york' 'city'         : constant(airports_from_city('new york')) 
        | 'newark' 'new' 'jersey'     : constant(airports_from_city('newark'))
        | 'oakland' 'california'      : constant(airports_from_city('oakland'))  
        | 'orlando' 'florida'         : constant(airports_from_city('new york'))  
        | 'philly'                    : constant(airports_from_city('philadelphia'))
        | 'san' 'diego' 'california'  : constant(airports_from_city('san diego'))
        | 'tacoma' 'washington'       : constant(airports_from_city('tacoma'))
        | 'washington' 'dc'           : constant(airports_from_city('washington'))
        | 'westchester'               : constant(airports_from_city('westchester')) 

#### IGNORABLE ####

PREIGNORE -> PREIGNORESYMBOL          : ignore
    | PREIGNORESYMBOL PREIGNORE
    
PREIGNORESYMBOL -> 'me'               : ignore
        | 'show' 
        | 'now' 
        | 'only' 
        | 'can' 
        | 'you' 
        | 'the' 
        | 'itinerary' 
        | 'of' 
        | 'also' 
        | 'a' 
        | 'list' 
        | 'could' 
        | 'give' 
        | 'which' 
        | 'what' 
        | 'is' 
        | "what's" 
        | 'are' 
        | 'my' 
        | 'choices' 
        | 'for' 
        | 'i' 
        | 'would' 
        | 'like' 
        | "i'd" 
        | 'to' 
        | 'see' 
        | 'have' 
        | 'make' 
        | 'book' 
        | 'find' 
        | 'information' 
        | 'on' 
        | 'know' 
        | 'some' 
        | 'hello' 
        | 'yes' 
        | 'please' 
        | 'repeat' 
        | 'do' 
        | 'have' 
        | 'there' 
        | 'need' 
        | 'hi' 
        | 'get' 
        | 'may' 
        | 'listing' 
        | 'listings' 
        | 'travel' 
        | 'arrangements' 
        | 'okay' 
        | 'want' 
        | 'tell' 
        | 'about' 
        | 'how' 
        | 'would' 
        | 'be' 
        | 'able' 
        | 'put' 
        | 'requesting' 
        | "i'm" 
        | 'looking' 
        | 'display' 

POSTIGNORE -> POSTIGNORESYMBOL               : ignore
        | POSTIGNORESYMBOL POSTIGNORE
    
POSTIGNORESYMBOL -> 'please'                 : ignore
        | 'there' 
        | 'are' 
        | 'currently' 
        | 'do' 
        | 'you' 
        | 'have' 
        | 'fares' 
        | 'information' 
        | 'i' 
        | 'want' 
        | 'would' 
        | 'like' 
        | 'the' 
        | 'flight' 
        | 'be' 
        | 'go' 
        | 'departures' 
        | 'is' 
        | 'such' 
        | 'a' 
        | 'that' 
        | 'serves' 
        | 'both' 
        | 'and' 
        | 'along' 
        | 'with' 
        | 'can' 
        | 'get' 
        | "i'd" 
        | 'traveling' 
        | 'for' 
        | 'me' 
        | UNK 
        | '.' 
        | '?'